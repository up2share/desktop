name: Build and Release for Windows

on:
  push:
    tags:
      - 'v*' # Trigger on tags starting with 'v'

jobs:
  build:
    runs-on: windows-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 22

    # Install dependencies
    - name: Install dependencies
      run: npm install

    # Build and publish the Electron app
    - name: Build and publish Electron app
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        VITE_APTABASE_APP_ID: ${{ secrets.APTABASE_APP_ID }}
      run: |
        npm run build:win
        npm run publish

    # # Build the Electron app for Windows
    # - name: Build Electron app
    #   run: npm run build:win

    # - name: Create release
    #   shell: bash
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     TAG=${{ github.ref_name }}
    #     RESPONSE=$(curl -s -X POST \
    #       -H "Authorization: token $GITHUB_TOKEN" \
    #       -H "Content-Type: application/json" \
    #       -d "{\"tag_name\": \"$TAG\", \"name\": \"$TAG\", \"body\": \"Release for $TAG\", \"draft\": false, \"prerelease\": false}" \
    #       https://api.github.com/repos/${{ github.repository }}/releases)
    #     echo "RESPONSE=$RESPONSE" # Debugging
    #     RELEASE_URL=$(echo "$RESPONSE" | jq -r '.upload_url' | sed -e "s/{?name,label}//")
    #     if [ -z "$RELEASE_URL" ]; then
    #       echo "Error: Failed to get RELEASE_URL"
    #       exit 1
    #     fi
    #     echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV

    # # Upload build artifact to the release
    # - name: Upload artifact
    #   shell: bash
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     RELEASE_URL: ${{ env.RELEASE_URL }}
    #   run: |
    #     for file in dist/*.exe; do
    #       curl -X POST \
    #         -H "Authorization: token $GITHUB_TOKEN" \
    #         -H "Content-Type: application/octet-stream" \
    #         --data-binary @"$file" \
    #         "$RELEASE_URL?name=$(basename "$file")"
    #     done

    # # Upload latest.yml to the release (this is used by the auto-updater)
    # - name: Upload latest.yml
    #   shell: bash
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     RELEASE_URL: ${{ env.RELEASE_URL }}
    #   run: |
    #     FILE="dist/latest.yml"
    #     if [ -f "$FILE" ]; then
    #       curl -X POST \
    #         -H "Authorization: token $GITHUB_TOKEN" \
    #         -H "Content-Type: application/octet-stream" \
    #         --data-binary @"$FILE" \
    #         "$RELEASE_URL?name=$(basename "$FILE")"
    #     else
    #       echo "Error: $FILE not found"
    #       exit 1
    #     fi
